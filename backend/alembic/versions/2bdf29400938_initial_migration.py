"""initial migration

Revision ID: 2bdf29400938
Revises: 
Create Date: 2025-03-20 22:23:03.626115

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2bdf29400938'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('id_counters',
    sa.Column('counter_key', sa.String(length=50), nullable=False),
    sa.Column('current_value', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('counter_key')
    )
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('role', sa.Enum('performer', 'manager', 'admin', name='user_role_enum'), nullable=False),
    sa.Column('status', sa.Enum('active', 'inactive', 'banned', name='user_status_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('actors',
    sa.Column('id', sa.String(length=20), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('real_name', sa.String(length=100), nullable=False),
    sa.Column('stage_name', sa.String(length=100), nullable=True),
    sa.Column('gender', sa.Enum('male', 'female', 'other', name='gender_enum'), nullable=False),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True, comment='身高(cm)'),
    sa.Column('weight', sa.Integer(), nullable=True, comment='体重(kg)'),
    sa.Column('bust', sa.Integer(), nullable=True, comment='胸围(cm)'),
    sa.Column('waist', sa.Integer(), nullable=True, comment='腰围(cm)'),
    sa.Column('hip', sa.Integer(), nullable=True, comment='臀围(cm)'),
    sa.Column('status', sa.Enum('active', 'inactive', 'suspended', 'retired', 'blacklisted', 'deleted', name='actor_status_enum'), nullable=False),
    sa.Column('avatar_url', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_actors_id'), 'actors', ['id'], unique=False)
    op.create_table('invite_codes',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('code', sa.String(length=6), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('agent_id', sa.Integer(), nullable=False),
    sa.Column('used_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['used_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('user_permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('permission', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('actor_contact_info',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('actor_id', sa.String(length=20), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('wechat', sa.String(length=50), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('emergency_contact', sa.String(length=255), nullable=True),
    sa.Column('emergency_phone', sa.String(length=20), nullable=True),
    sa.Column('social_media', sa.String(length=1000), nullable=True, comment='社交媒体，JSON格式存储'),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('actor_contract_info',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('actor_id', sa.String(length=20), nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=True, comment='经纪人ID'),
    sa.Column('fee_standard', sa.String(length=500), nullable=True, comment='片酬标准'),
    sa.Column('contract_start_date', sa.Date(), nullable=True),
    sa.Column('contract_end_date', sa.Date(), nullable=True),
    sa.Column('contract_terms', sa.String(length=1000), nullable=True, comment='合同条款'),
    sa.Column('commission_rate', sa.Integer(), nullable=True, comment='佣金比例'),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], ),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('actor_media',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('actor_id', sa.String(length=20), nullable=False),
    sa.Column('type', sa.Enum('avatar', 'photo', 'video', name='media_type_enum'), nullable=False),
    sa.Column('file_name', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=255), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True, comment='文件大小(字节)'),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('bucket_name', sa.String(length=100), nullable=True, comment='MinIO bucket名称'),
    sa.Column('object_name', sa.String(length=255), nullable=True, comment='MinIO对象名称'),
    sa.Column('uploaded_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('actor_professional_info',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('actor_id', sa.String(length=20), nullable=False),
    sa.Column('bio', sa.String(length=2000), nullable=True, comment='个人简介'),
    sa.Column('skills', sa.String(length=500), nullable=True, comment='技能，JSON格式存储'),
    sa.Column('experience', sa.String(length=2000), nullable=True, comment='经验，JSON格式存储'),
    sa.Column('education', sa.String(length=1000), nullable=True, comment='教育背景，JSON格式存储'),
    sa.Column('awards', sa.String(length=1000), nullable=True, comment='获奖情况，JSON格式存储'),
    sa.Column('languages', sa.String(length=500), nullable=True, comment='语言能力，JSON格式存储'),
    sa.Column('current_rank', sa.Enum('主角', '角色', '特约', '群演', '无经验', name='actor_rank_enum'), nullable=True, comment='演员等级'),
    sa.Column('minimum_fee', sa.Float(), nullable=True, comment='接受最低片酬（元/天）'),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('actor_status_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('actor_id', sa.String(length=20), nullable=False),
    sa.Column('previous_status', sa.Enum('active', 'inactive', 'suspended', 'retired', 'blacklisted', 'deleted', name='actor_status_history_enum'), nullable=True),
    sa.Column('new_status', sa.Enum('active', 'inactive', 'suspended', 'retired', 'blacklisted', 'deleted', name='actor_status_history_enum2'), nullable=False),
    sa.Column('reason', sa.String(length=255), nullable=True),
    sa.Column('changed_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], ),
    sa.ForeignKeyConstraint(['changed_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('actor_tags',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('actor_id', sa.String(length=20), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['actors.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('actor_tags')
    op.drop_table('actor_status_history')
    op.drop_table('actor_professional_info')
    op.drop_table('actor_media')
    op.drop_table('actor_contract_info')
    op.drop_table('actor_contact_info')
    op.drop_table('user_permissions')
    op.drop_table('invite_codes')
    op.drop_index(op.f('ix_actors_id'), table_name='actors')
    op.drop_table('actors')
    op.drop_table('users')
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_table('tags')
    op.drop_table('id_counters')
    # ### end Alembic commands ### 